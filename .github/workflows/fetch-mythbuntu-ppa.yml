---

name: fetch-mythbuntu-ppa

on:
  workflow_call:
    inputs:
      mythbuntu-release:
        description: 'mythbuntu PPA name'
        required: true
        type: string
      mythbuntu-arch:
        description: 'arhitecture of interest'
        required: false
        type: string
        default: 'amd64'
      os-release:
        description: 'OS version of interest'
        required: false
        type: string
        default: '20.04'
      record-count:
        description: 'number of build records to fetch'
        required: false
        type: number
        default: 40
    outputs:
      versions:
        description: 'metadata from the remote image'
        value: ${{ jobs.query-launchpad.outputs.info }}

jobs:
  query-launchpad:
    runs-on: ubuntu-latest
    outputs:
      info: ${{ steps.fetch-ppa-versions.outputs.versions }}
    env:
      mythbuntu-release: ${{ inputs.mythbuntu-release }}
      record-count: ${{ inputs.record-count }}
      mythbuntu-arch: ${{ inputs.mythbuntu-arch }}
      os-release: ${{ inputs.os-release }}
    steps:
      - run: python -m pip install --upgrade pip
      - run: python -m pip install launchpadlib
      - id: fetch-ppa-versions
        run: |
          result=$(python -c '
          import launchpadlib
          import os
          import re

          from launchpadlib.launchpad import Launchpad
          from lazr.restfulclient.errors import HTTPError

          record_re = re.compile(r"\.(?P<date>[0-9]+)\.(?P<commit>[0-9a-f]+)~ubuntu(?P<os>[0-9]+\.[0-9]+)\.[0-9]$")

          def tokenize_record(record):
            class build: pass
            match = record_re.search(record.source_package_version)
            if None != match:
              build.version = record.source_package_version
              build.arch = record.arch_tag
              build.date = match.group("date")
              build.commit = match.group("commit")
              build.os = match.group("os")
            return build

          ppa_name = os.environ["mythbuntu-release"]
          records = os.environ["record-count"]
          arch = os.environ["mythbuntu-arch"]
          release = os.environ["os-release"]

          try:
            launchpad = Launchpad.login_anonymously("mythbuntu-ppa-query", "production", version="devel")
            mythbuntu = launchpad.people["mythbuntu"]
            ppa = mythbuntu.getPPAByName(name=ppa_name)
            all_records = ppa.getBuildRecords(build_state = "Successfully built")[:records]
            arch_records = (record for record in all_records if record.arch_tag == arch)
            arch_builds = (tokenize_record(record) for record in arch_records)
            versions = (build.version for build in arch_builds if build.os == release)
            print(list(versions))

          except HTTPError as e:
            print(e.content)
            sys.exit(1)
          ')
          if [[ $? -eq 0 ]]; then
          echo "::set-output name=versions::${result//\'/\"}"
          else
          echo "::set-output name=versions::[]"
          echo "::error file=fetch-mythbuntu-ppa.yml,line=83::${result}"
          fi

